// <auto-generated />
using System;
using DbLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbLayer.Migrations
{
    [DbContext(typeof(IMSDbContext))]
    partial class IMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthLayer.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AuthLayer.Models.ViewUsersVsRoles", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleNormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ViewUsersVsRoles", (string)null);
                });

            modelBuilder.Entity("DbLayer.Models.Finance.Statement", b =>
                {
                    b.Property<int>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatementId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("PatientUuid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StatementId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("PatientUuid");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("DbLayer.Models.Finance.StatementItem", b =>
                {
                    b.Property<int>("StatementItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatementItemId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("StatementId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StatementItemId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("StatementId");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("StatementItems");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseSpec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiseaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PatientUuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiseaseId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("DiseaseTypeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffUuid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("ImageTypeId");

                    b.HasIndex("StaffUuid");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Patients", b =>
                {
                    b.Property<int>("PateintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PateintId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InChargeuUud")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDischarged")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientUuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PateintId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("InChargeuUud");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Medicines")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.DiseaseType", b =>
                {
                    b.Property<int>("DiseaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseTypeId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiseaseTypeId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("DiseaseTypes");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.ImageType", b =>
                {
                    b.Property<int>("ImageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageTypeId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageTypeId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("ImageTypes");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.OsSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SectionId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("OsSections");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.OsStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StatusId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("SectionId");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("OsStatuss");
                });

            modelBuilder.Entity("DbLayer.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Educations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffUuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffId");

                    b.HasIndex("AddedById")
                        .IsUnique()
                        .HasFilter("[AddedById] IS NOT NULL");

                    b.HasIndex("UpdatedById")
                        .IsUnique()
                        .HasFilter("[UpdatedById] IS NOT NULL");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("DbLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DbLayer.Models.Finance.Statement", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Finance.Statement", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Patient.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientUuid")
                        .HasPrincipalKey("PatientUuid");

                    b.HasOne("DbLayer.Models.Settings.OsStatus", "OsStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Finance.Statement", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("OsStatus");

                    b.Navigation("Patient");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Finance.StatementItem", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Finance.StatementItem", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Patient.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.Finance.Statement", "Statement")
                        .WithMany("Items")
                        .HasForeignKey("StatementId");

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Finance.StatementItem", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("Disease");

                    b.Navigation("Statement");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Disease", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Disease", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Settings.DiseaseType", "DiseaseType")
                        .WithMany("Diseases")
                        .HasForeignKey("DiseaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.Staff", "Doctor")
                        .WithMany("Diseases")
                        .HasForeignKey("DoctorId")
                        .HasPrincipalKey("StaffUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Disease", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("DiseaseType");

                    b.Navigation("Doctor");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Image", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Image", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Patient.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.Settings.ImageType", "ImageType")
                        .WithMany()
                        .HasForeignKey("ImageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.Staff", "Staff")
                        .WithMany("Images")
                        .HasForeignKey("StaffUuid")
                        .HasPrincipalKey("StaffUuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Image", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("Disease");

                    b.Navigation("ImageType");

                    b.Navigation("Staff");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Patients", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Patients", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Staff", "Staff")
                        .WithMany("Patient")
                        .HasForeignKey("InChargeuUud")
                        .HasPrincipalKey("StaffUuid");

                    b.HasOne("DbLayer.Models.Patient.Disease", "Disease")
                        .WithOne("Patient")
                        .HasForeignKey("DbLayer.Models.Patient.Patients", "PatientUuid")
                        .HasPrincipalKey("DbLayer.Models.Patient.Disease", "PatientUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Patients", "PatientUuid")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Patients", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("Disease");

                    b.Navigation("Staff");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Prescription", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Prescription", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Patient.Disease", "Disease")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Patient.Prescription", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("Disease");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.DiseaseType", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.DiseaseType", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.DiseaseType", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.ImageType", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.ImageType", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.ImageType", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.OsSection", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.OsSection", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.OsSection", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.OsStatus", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.OsStatus", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.Settings.OsSection", "OsSection")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Settings.OsStatus", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("OsSection");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DbLayer.Models.Staff", b =>
                {
                    b.HasOne("DbLayer.Models.User", "AddedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Staff", "AddedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.HasOne("DbLayer.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Staff", "StaffUuid")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Models.User", "UpdatedBy")
                        .WithOne()
                        .HasForeignKey("DbLayer.Models.Staff", "UpdatedById")
                        .HasPrincipalKey("DbLayer.Models.User", "UserUuid");

                    b.Navigation("AddedBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthLayer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthLayer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthLayer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthLayer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbLayer.Models.Finance.Statement", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DbLayer.Models.Patient.Disease", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("DbLayer.Models.Settings.DiseaseType", b =>
                {
                    b.Navigation("Diseases");
                });

            modelBuilder.Entity("DbLayer.Models.Staff", b =>
                {
                    b.Navigation("Diseases");

                    b.Navigation("Images");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
